/// Grid system
//
// Generate semantic grid columns with these mixins.


// make the sum of 2 different arrays

@mixin dual-dynamic-array ($array-one, $array-two, $context) {
  
  $prev-value-one: "";
  $prev-value-two: "";
  $prev-total: "";
  
  @each $breakpoint in map-keys($grid-breakpoints) {
    
    $value-one: map-get($array-one, $breakpoint);
    $value-two: map-get($array-two, $breakpoint);
    $total: "";
    
    @if $value-one and $value-one != $prev-value-one and $value-one != "" {
      
      $total: $value-one + $value-two;
      
    } @else if $value-one and $value-one != "" {
        @if $value-two != $prev-value-two  {
          $total: $value-one + $value-two;
        }
    }
    
    
    @if $total !="" and $total != $prev-total {
      
      @include media-breakpoint-up($breakpoint) {
        @if $context == 'bp-sidebar' {
          @include sq-sidebar($total);
        
        } @else if $context == 'sidebar' {
          @include make-sidebar($total);
          
        } @else if $context == 'container' {
          @include dynamic-container-gutter($total);  
        }
      }
    }
    
    $prev-value-one: $value-one;
    $prev-value-two: $value-two;
    $prev-total: $total;
    
  }
}

@mixin dynamic-gutter($element) {
    
    $prev-gutter: "";
    @each $breakpoint in map-keys($grid-breakpoints) {
      $gutter: map-get($grid-gutter-widths, $breakpoint);

      @if $gutter and $gutter != $prev-gutter and $gutter != "" {
        @include media-breakpoint-up($breakpoint) {
          @if $element == "row" {
            margin-right: ($gutter / -2);
            margin-left: ($gutter / -2);

          } @else if $element == "margin bottom" {
              margin-bottom: $gutter;
            
          } @else if $element == "width" {
              width: $gutter / 2;
            
          } @else if $element == "grid gap" {
            margin: $gutter / 2;
            //@include grid-gap(row, $gutter);
            //@include grid-gap(column, $gutter);
          } @else if $element == "margin gallery" {
            margin: ($gutter / -2) ($gutter / -2) calc(#{spacer(5)} - #{$gutter}/2) ($gutter / -2);

          } @else {
              padding-right: ($gutter / 2);
              padding-left: ($gutter / 2);
          }

        }
      }
      $prev-gutter: $gutter;
    }
}

@mixin dynamic-container-gutter($element) {
  padding-left: $element/2;
  padding-right: $element/2;
}

@mixin make-container() {
  width: 100%;
  @include dual-dynamic-array($container-extra-gutters, $grid-gutter-widths, 'container');
  
  margin-right: auto;
  margin-left: auto;
  
}

// For each breakpoint, define the maximum width of the container in a media query

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  //margin-right: ($grid-gutter-width / -2);
  //margin-left: ($grid-gutter-width / -2);
  @include dynamic-gutter("row");
}

@mixin make-col-ready() {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: 1px; // Prevent collapsing
  //padding-right: ($grid-gutter-width / 2);
  //padding-left: ($grid-gutter-width / 2);
  @include dynamic-gutter("col");
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}



@mixin make-sidebar($value) {
  .sidebar-right {
    @include grid-template(columns, calc(100% - #{$value}) $value); 
  }
  .sidebar-left,
  .sidebar-single {
    @include grid-template(columns, $value calc(100% - #{$value}));
  }
  
}


